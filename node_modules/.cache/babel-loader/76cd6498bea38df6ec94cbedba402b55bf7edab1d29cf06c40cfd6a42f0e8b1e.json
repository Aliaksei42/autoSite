{"ast":null,"code":"const searchPosts = (searchText, setFilteredPosts, posts) => {\n  console.log(searchText);\n  // Приводим текст поиска к нижнему регистру для регистронезависимого поиска\n  const searchTextLower = searchText.toLowerCase().trim();\n\n  // Фильтруем посты по заголовку, дате и тексту\n  const filteredPosts = posts.filter(post => {\n    // Проверяем, что объект post существует и имеет необходимые свойства\n    if (post && post.title && post.date && post.text) {\n      // Приводим данные поста к нижнему регистру для регистронезависимого сравнения\n      const titleLower = post.title.toLowerCase();\n      const dateLower = post.date.toLowerCase();\n      const textLower = post.text.toLowerCase();\n\n      // Проверяем, содержит ли пост хотя бы одно из полей значение searchText\n      return titleLower.includes(searchTextLower) || dateLower.includes(searchTextLower) || textLower.includes(searchTextLower);\n    } else {\n      return false; // Если пост не имеет необходимых свойств, не включаем его в фильтрованный список\n    }\n  });\n\n  // Обновляем отфильтрованные посты через переданную функцию setFilteredPosts\n  setFilteredPosts(filteredPosts);\n};\nexport default searchPosts;","map":{"version":3,"names":["searchPosts","searchText","setFilteredPosts","posts","console","log","searchTextLower","toLowerCase","trim","filteredPosts","filter","post","title","date","text","titleLower","dateLower","textLower","includes"],"sources":["C:/Users/Alex/Desktop/Project16.11/auto-site/src/components/Input/searchPosts.jsx"],"sourcesContent":["const searchPosts = (searchText, setFilteredPosts, posts) => {\r\n    console.log(searchText);\r\n    // Приводим текст поиска к нижнему регистру для регистронезависимого поиска\r\n    const searchTextLower = searchText.toLowerCase().trim();\r\n  \r\n    // Фильтруем посты по заголовку, дате и тексту\r\n    const filteredPosts = posts.filter((post) => {\r\n      // Проверяем, что объект post существует и имеет необходимые свойства\r\n      if (post && post.title && post.date && post.text) {\r\n        // Приводим данные поста к нижнему регистру для регистронезависимого сравнения\r\n        const titleLower = post.title.toLowerCase();\r\n        const dateLower = post.date.toLowerCase();\r\n        const textLower = post.text.toLowerCase();\r\n  \r\n        // Проверяем, содержит ли пост хотя бы одно из полей значение searchText\r\n        return (\r\n          titleLower.includes(searchTextLower) ||\r\n          dateLower.includes(searchTextLower) ||\r\n          textLower.includes(searchTextLower)\r\n        );\r\n      } else {\r\n        return false; // Если пост не имеет необходимых свойств, не включаем его в фильтрованный список\r\n      }\r\n    });\r\n  \r\n    // Обновляем отфильтрованные посты через переданную функцию setFilteredPosts\r\n    setFilteredPosts(filteredPosts);\r\n  };\r\n  \r\n  export default searchPosts;"],"mappings":"AAAA,MAAMA,WAAW,GAAGA,CAACC,UAAU,EAAEC,gBAAgB,EAAEC,KAAK,KAAK;EACzDC,OAAO,CAACC,GAAG,CAACJ,UAAU,CAAC;EACvB;EACA,MAAMK,eAAe,GAAGL,UAAU,CAACM,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;;EAEvD;EACA,MAAMC,aAAa,GAAGN,KAAK,CAACO,MAAM,CAAEC,IAAI,IAAK;IAC3C;IACA,IAAIA,IAAI,IAAIA,IAAI,CAACC,KAAK,IAAID,IAAI,CAACE,IAAI,IAAIF,IAAI,CAACG,IAAI,EAAE;MAChD;MACA,MAAMC,UAAU,GAAGJ,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC,CAAC;MAC3C,MAAMS,SAAS,GAAGL,IAAI,CAACE,IAAI,CAACN,WAAW,CAAC,CAAC;MACzC,MAAMU,SAAS,GAAGN,IAAI,CAACG,IAAI,CAACP,WAAW,CAAC,CAAC;;MAEzC;MACA,OACEQ,UAAU,CAACG,QAAQ,CAACZ,eAAe,CAAC,IACpCU,SAAS,CAACE,QAAQ,CAACZ,eAAe,CAAC,IACnCW,SAAS,CAACC,QAAQ,CAACZ,eAAe,CAAC;IAEvC,CAAC,MAAM;MACL,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC,CAAC;;EAEF;EACAJ,gBAAgB,CAACO,aAAa,CAAC;AACjC,CAAC;AAED,eAAeT,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}