{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\Project16.11\\\\auto-site\\\\src\\\\pages\\\\PostPage.jsx\",\n  _s = $RefreshSig$();\n// PostPage.js\n// Импортируем React и необходимые компоненты\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport Post from '../components/Post/Post'; // Предполагается, что у вас есть компонент Post\nimport NotFound from '../components/NotFound/NotFound'; // Предполагается, что у вас есть компонент NotFound\nimport styles from './PostPage.module.css'; // Импортируем стили для компонента PostPage\n\n// Компонент PostPage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  // Используем хук useParams для получения параметра из URL\n  const {\n    slug\n  } = useParams();\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [error, setError] = useState(null);\n  console.log(\"Slug from URL:\", slug);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (!slug) {\n          setError('Error fetching post: Slug is undefined');\n          return;\n        }\n\n        // Замените URL на ваш API MongoDB Atlas\n        const response = await axios.get(`http://localhost:3002/posts/${slug}`);\n        if (response.data) {\n          const matchingPost = response.data;\n          setSelectedPost(matchingPost);\n        } else {\n          setError('Error fetching post: Empty response data');\n        }\n      } catch (error) {\n        console.error('Error fetching post:', error.message);\n        setError('Error fetching post: ${');\n      }\n    };\n    fetchData();\n  }, [slug]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n  if (!selectedPost) {\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n  const {\n    img,\n    title,\n    text,\n    date,\n    category\n  } = selectedPost;\n  const postUrl = `http://localhost:3000/posts/${slug}`;\n  const formattedText = text.split('\\n').map((paragraph, index) =>\n  /*#__PURE__*/\n  // Используем dangerouslySetInnerHTML для выделения нужных частей текста\n  _jsxDEV(\"p\", {\n    dangerouslySetInnerHTML: {\n      __html: paragraph\n    }\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.postPage,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.postContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: img,\n        alt: title,\n        className: styles.postPageImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.postPageTitle,\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.postPageText,\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n// Экспортируем компонент PostPage\n_s(PostPage, \"gsDVMDU3lRadcWSlCATAbEVVtts=\", false, function () {\n  return [useParams];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["useEffect","useState","axios","useParams","Post","NotFound","styles","jsxDEV","_jsxDEV","PostPage","_s","slug","selectedPost","setSelectedPost","error","setError","console","log","fetchData","response","get","data","matchingPost","message","children","fileName","_jsxFileName","lineNumber","columnNumber","img","title","text","date","category","postUrl","formattedText","split","map","paragraph","index","dangerouslySetInnerHTML","__html","className","postPage","postContainer","src","alt","postPageImage","postPageTitle","postPageText","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/Project16.11/auto-site/src/pages/PostPage.jsx"],"sourcesContent":["// PostPage.js\r\n// Импортируем React и необходимые компоненты\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom'\r\nimport Post from '../components/Post/Post' // Предполагается, что у вас есть компонент Post\r\nimport NotFound from '../components/NotFound/NotFound' // Предполагается, что у вас есть компонент NotFound\r\nimport styles from './PostPage.module.css' // Импортируем стили для компонента PostPage\r\n\r\n// Компонент PostPage\r\nconst PostPage = () => {\r\n  // Используем хук useParams для получения параметра из URL\r\n  const { slug } = useParams()\r\n  const [selectedPost, setSelectedPost] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  console.log(\"Slug from URL:\", slug);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        if (!slug) {\r\n          setError('Error fetching post: Slug is undefined');\r\n          return;\r\n        }\r\n\r\n        // Замените URL на ваш API MongoDB Atlas\r\n        const response = await axios.get(`http://localhost:3002/posts/${slug}`);\r\n\r\n        if (response.data) {\r\n          const matchingPost = response.data;\r\n          setSelectedPost(matchingPost);\r\n        } else {\r\n          setError('Error fetching post: Empty response data');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching post:', error.message);\r\n        setError('Error fetching post: ${');\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [slug]);\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  if (!selectedPost) {\r\n    return <h3>Loading...</h3>;\r\n  }\r\n\r\n  const { img, title, text, date, category } = selectedPost;\r\n  const postUrl = `http://localhost:3000/posts/${slug}`;\r\n\r\n  const formattedText = text.split('\\n').map((paragraph, index) => (\r\n    // Используем dangerouslySetInnerHTML для выделения нужных частей текста\r\n    <p key={index} dangerouslySetInnerHTML={{ __html: paragraph }}></p>\r\n  ));\r\n\r\n\r\n  return (\r\n    <div className={styles.postPage}>\r\n      <div className={styles.postContainer}>\r\n        <img src={img} alt={title} className={styles.postPageImage} />\r\n        <div className={styles.postPageTitle}>\r\n          <h3>{title}</h3>\r\n        </div>\r\n        <div className={styles.postPageText}>{text}</div>\r\n        <h4>{date}</h4>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Экспортируем компонент PostPage\r\nexport default PostPage\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}