{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\Project16.11\\\\auto-site\\\\src\\\\pages\\\\SearchPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchPage = () => {\n  _s();\n  const [posts, setPosts] = useState([{\n    id: 1,\n    title: 'Заголовок 1',\n    text: 'Текст поста 1',\n    date: '2023-01-01'\n  }, {\n    id: 2,\n    title: 'Заголовок 2',\n    text: 'Текст поста 2',\n    date: '2023-02-01'\n  }, {\n    id: 3,\n    title: 'Заголовок 3',\n    text: 'Текст поста 3',\n    date: '2023-03-01'\n  }\n  // Добавьте другие посты по мере необходимости\n  ]);\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    // Функция для сортировки по дате\n    const sortByDate = (a, b) => new Date(b.date) - new Date(a.date);\n\n    // Сортировка и фильтрация постов при изменении массива или строки поиска\n    const filteredPosts = posts.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase()) || post.text.toLowerCase().includes(searchTerm.toLowerCase()) || post.date.includes(searchTerm)).sort(sortByDate);\n    setSearchResults(filteredPosts);\n  }, [searchTerm, posts]);\n  const handleSearchChange = event => {\n    setSearchTerm(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0421\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0430 \\u043F\\u043E\\u0441\\u0442\\u043E\\u0432\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u043F\\u043E \\u0437\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043A\\u0443, \\u0442\\u0435\\u043A\\u0441\\u0442\\u0443 \\u0438\\u043B\\u0438 \\u0434\\u0430\\u0442\\u0435\",\n      value: searchTerm,\n      onChange: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: searchResults.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchPage, \"oTczjOjtPXnqmscVkPaYatV7xrI=\");\n_c = SearchPage;\nexport default SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SearchPage","_s","posts","setPosts","id","title","text","date","searchTerm","setSearchTerm","searchResults","setSearchResults","sortByDate","a","b","Date","filteredPosts","filter","post","toLowerCase","includes","sort","handleSearchChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","map","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/Project16.11/auto-site/src/pages/SearchPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\n\r\nconst SearchPage = () => {\r\n  const [posts, setPosts] = useState([\r\n    { id: 1, title: 'Заголовок 1', text: 'Текст поста 1', date: '2023-01-01' },\r\n    { id: 2, title: 'Заголовок 2', text: 'Текст поста 2', date: '2023-02-01' },\r\n    { id: 3, title: 'Заголовок 3', text: 'Текст поста 3', date: '2023-03-01' },\r\n    // Добавьте другие посты по мере необходимости\r\n  ]);\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Функция для сортировки по дате\r\n    const sortByDate = (a, b) => new Date(b.date) - new Date(a.date);\r\n\r\n    // Сортировка и фильтрация постов при изменении массива или строки поиска\r\n    const filteredPosts = posts\r\n      .filter(\r\n        (post) =>\r\n          post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n          post.text.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n          post.date.includes(searchTerm)\r\n      )\r\n      .sort(sortByDate);\r\n\r\n    setSearchResults(filteredPosts);\r\n  }, [searchTerm, posts]);\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница постов</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Поиск по заголовку, тексту или дате\"\r\n        value={searchTerm}\r\n        onChange={handleSearchChange}\r\n      />\r\n      <ul>\r\n        {searchResults.map((post) => (\r\n          <li key={post.id}>\r\n            <strong>{post.title}</strong>\r\n            <p>{post.text}</p>\r\n            <p>{post.date}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}