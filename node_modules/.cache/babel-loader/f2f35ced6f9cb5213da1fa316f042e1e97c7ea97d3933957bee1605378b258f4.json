{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\Project16.11\\\\auto-site\\\\src\\\\components\\\\Post\\\\Post.jsx\";\n// Импорт React и других компонентов\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport NotFound from '../NotFound/NotFound';\nimport styles from './Post.module.css'; // Импорт стилей для компонента Post\n\n// Компонент Post\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = ({\n  post,\n  isSinglePost\n}) => {\n  // Если пост не передан, отображаем ссылку на страницу NotFound\n  if (!post) {\n    return (\n      /*#__PURE__*/\n      // Контейнер для отображения страницы NotFound\n      _jsxDEV(\"div\", {\n        className: styles.postContainer.postImage,\n        children: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n  // Деструктуризация свойств поста\n  const {\n    id,\n    title,\n    img,\n    text\n  } = post;\n\n  // Определяем, нужно ли отобразить полный текст поста или его сокращенную версию\n  const displayedText = isSinglePost ? text : text.slice(0, 100) + '...';\n\n  // Используем литералы шаблонов для создания уникального URL поста\n  return (\n    /*#__PURE__*/\n    // Основной контейнер поста, с классами, зависящими от типа отображения\n    _jsxDEV(\"div\", {\n      className: `${styles.postContainer} ${isSinglePost ? styles.singlePost : ''}`,\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/posts/${post.id}-${post.title.replace(/\\s+/g, '-')}`,\n        className: styles.postLink,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.postImageWrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: styles.postImage,\n            src: img,\n            alt: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: styles.postTitle,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.postText,\n          children: displayedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n// Экспорт компонента Post\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","Link","NotFound","styles","jsxDEV","_jsxDEV","Post","post","isSinglePost","className","postContainer","postImage","children","fileName","_jsxFileName","lineNumber","columnNumber","id","title","img","text","displayedText","slice","singlePost","to","replace","postLink","postImageWrapper","src","alt","postTitle","postText","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/Project16.11/auto-site/src/components/Post/Post.jsx"],"sourcesContent":["// Импорт React и других компонентов\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport NotFound from '../NotFound/NotFound'\r\nimport styles from './Post.module.css' // Импорт стилей для компонента Post\r\n\r\n// Компонент Post\r\nconst Post = ({ post, isSinglePost }) => {\r\n  // Если пост не передан, отображаем ссылку на страницу NotFound\r\n  if (!post) {\r\n    return (\r\n      // Контейнер для отображения страницы NotFound\r\n      <div className={styles.postContainer.postImage}>\r\n        <NotFound />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Деструктуризация свойств поста\r\n  const { id, title, img, text } = post\r\n\r\n  // Определяем, нужно ли отобразить полный текст поста или его сокращенную версию\r\n  const displayedText = isSinglePost ? text : text.slice(0, 100) + '...'\r\n\r\n  // Используем литералы шаблонов для создания уникального URL поста\r\n  return (\r\n    // Основной контейнер поста, с классами, зависящими от типа отображения\r\n    <div\r\n      className={`${styles.postContainer} ${\r\n        isSinglePost ? styles.singlePost : ''\r\n      }`}\r\n    >\r\n      {/* Ссылка на страницу с подробной информацией о посте */}\r\n      <Link\r\n  to={`/posts/${post.id}-${post.title.replace(/\\s+/g, '-')}`}\r\n  className={styles.postLink}\r\n>\r\n        <div className={styles.postImageWrapper}>\r\n\r\n        {/* Изображение поста */}\r\n        <img className={styles.postImage} src={img} alt={title} />\r\n        </div>\r\n        {/* Заголовок поста */}\r\n        <h3 className={styles.postTitle}>{title}</h3>\r\n        {/* Контейнер для полного текста поста */}\r\n\r\n        {/* Параграф с текстом поста (обрезанным) */}\r\n        <p className={styles.postText}>{displayedText}</p>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Экспорт компонента Post\r\nexport default Post\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,MAAM,MAAM,mBAAmB,EAAC;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAa,CAAC,KAAK;EACvC;EACA,IAAI,CAACD,IAAI,EAAE;IACT;MAAA;MACE;MACAF,OAAA;QAAKI,SAAS,EAAEN,MAAM,CAACO,aAAa,CAACC,SAAU;QAAAC,QAAA,eAC7CP,OAAA,CAACH,QAAQ;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT;IAAC;EAEV;;EAEA;EACA,MAAM;IAAEC,EAAE;IAAEC,KAAK;IAAEC,GAAG;IAAEC;EAAK,CAAC,GAAGb,IAAI;;EAErC;EACA,MAAMc,aAAa,GAAGb,YAAY,GAAGY,IAAI,GAAGA,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK;;EAEtE;EACA;IAAA;IACE;IACAjB,OAAA;MACEI,SAAS,EAAG,GAAEN,MAAM,CAACO,aAAc,IACjCF,YAAY,GAAGL,MAAM,CAACoB,UAAU,GAAG,EACpC,EAAE;MAAAX,QAAA,eAGHP,OAAA,CAACJ,IAAI;QACTuB,EAAE,EAAG,UAASjB,IAAI,CAACU,EAAG,IAAGV,IAAI,CAACW,KAAK,CAACO,OAAO,CAAC,MAAM,EAAE,GAAG,CAAE,EAAE;QAC3DhB,SAAS,EAAEN,MAAM,CAACuB,QAAS;QAAAd,QAAA,gBAErBP,OAAA;UAAKI,SAAS,EAAEN,MAAM,CAACwB,gBAAiB;UAAAf,QAAA,eAGxCP,OAAA;YAAKI,SAAS,EAAEN,MAAM,CAACQ,SAAU;YAACiB,GAAG,EAAET,GAAI;YAACU,GAAG,EAAEX;UAAM;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD,CAAC,eAENX,OAAA;UAAII,SAAS,EAAEN,MAAM,CAAC2B,SAAU;UAAAlB,QAAA,EAAEM;QAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAI7CX,OAAA;UAAGI,SAAS,EAAEN,MAAM,CAAC4B,QAAS;UAAAnB,QAAA,EAAES;QAAa;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;AAEV,CAAC;;AAED;AAAAgB,EAAA,GA9CM1B,IAAI;AA+CV,eAAeA,IAAI;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}