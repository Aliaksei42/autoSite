{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\Project16.11\\\\auto-site\\\\src\\\\components\\\\Post\\\\Post.jsx\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Post.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = ({\n  post,\n  showFullText,\n  isSinglePost\n}) => {\n  // Если пост не передан, отображаем ссылку на страницу NotFound\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/NotFound\",\n      children: \"NotFound\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Деструктуризация свойств поста\n  const {\n    id,\n    title,\n    img,\n    text\n  } = post;\n\n  // Определяем, нужно ли отобразить полный текст поста или его сокращенную версию\n  const displayedText = showFullText ? text : text.slice(0, 200) + '...';\n\n  // Используем литералы шаблонов для создания уникального URL поста\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `post ${isSinglePost ? 'single-post' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(Link, {\n      to: `/posts/${post.id}-${post.title.replace(/\\s+/g, '-')}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"post-image\",\n        src: img,\n        alt: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isSinglePost ? 'post-content-full' : 'post-content',\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: displayedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","Link","jsxDEV","_jsxDEV","Post","post","showFullText","isSinglePost","to","children","fileName","_jsxFileName","lineNumber","columnNumber","id","title","img","text","displayedText","slice","className","replace","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/Project16.11/auto-site/src/components/Post/Post.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport './Post.css'\r\n\r\nconst Post = ({ post, showFullText, isSinglePost }) => {\r\n  // Если пост не передан, отображаем ссылку на страницу NotFound\r\n  if (!post) {\r\n    return <Link to=\"/NotFound\">NotFound</Link>\r\n  }\r\n\r\n  // Деструктуризация свойств поста\r\n  const { id, title, img, text } = post\r\n\r\n  // Определяем, нужно ли отобразить полный текст поста или его сокращенную версию\r\n  const displayedText = showFullText ? text : text.slice(0, 200) + '...'\r\n\r\n  // Используем литералы шаблонов для создания уникального URL поста\r\n  return (\r\n    <div className={`post ${isSinglePost ? 'single-post' : ''}`}>\r\n      {/* Ссылка на страницу с подробной информацией о посте */}\r\n      <Link to={`/posts/${post.id}-${post.title.replace(/\\s+/g, '-')}`}>\r\n        {/* Изображение поста */}\r\n        <img className=\"post-image\" src={img} alt={title} />\r\n         {/* Заголовок поста */}\r\n        <h3>{title}</h3>\r\n        <div className={isSinglePost ? 'post-content-full' : 'post-content'}>\r\n      \r\n         {/* Текст поста */}\r\n        <p>{displayedText}</p>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC,YAAY;EAAEC;AAAa,CAAC,KAAK;EACrD;EACA,IAAI,CAACF,IAAI,EAAE;IACT,oBAAOF,OAAA,CAACF,IAAI;MAACO,EAAE,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC7C;;EAEA;EACA,MAAM;IAAEC,EAAE;IAAEC,KAAK;IAAEC,GAAG;IAAEC;EAAK,CAAC,GAAGZ,IAAI;;EAErC;EACA,MAAMa,aAAa,GAAGZ,YAAY,GAAGW,IAAI,GAAGA,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK;;EAEtE;EACA,oBACEhB,OAAA;IAAKiB,SAAS,EAAG,QAAOb,YAAY,GAAG,aAAa,GAAG,EAAG,EAAE;IAAAE,QAAA,eAE1DN,OAAA,CAACF,IAAI;MAACO,EAAE,EAAG,UAASH,IAAI,CAACS,EAAG,IAAGT,IAAI,CAACU,KAAK,CAACM,OAAO,CAAC,MAAM,EAAE,GAAG,CAAE,EAAE;MAAAZ,QAAA,gBAE/DN,OAAA;QAAKiB,SAAS,EAAC,YAAY;QAACE,GAAG,EAAEN,GAAI;QAACO,GAAG,EAAER;MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEpDV,OAAA;QAAAM,QAAA,EAAKM;MAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChBV,OAAA;QAAKiB,SAAS,EAAEb,YAAY,GAAG,mBAAmB,GAAG,cAAe;QAAAE,QAAA,eAGpEN,OAAA;UAAAM,QAAA,EAAIS;QAAa;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAAW,EAAA,GA7BKpB,IAAI;AA+BV,eAAeA,IAAI;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}