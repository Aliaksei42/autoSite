{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\Project16.11\\\\auto-site\\\\src\\\\pages\\\\Events.jsx\",\n  _s = $RefreshSig$();\n// PostList.js\nimport React, { useEffect, useState } from 'react';\nimport Post from './Post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // Функция для загрузки данных о постах с сервера\n    const fetchPosts = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/posts');\n        const data = await response.json();\n        setPosts(data);\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n\n    // Вызываем функцию загрузки данных при монтировании компонента\n    fetchPosts();\n  }, []); // Пустой массив зависимостей гарантирует, что useEffect вызовется только один раз при монтировании компонента\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u043F\\u043E\\u0441\\u0442\\u043E\\u0432\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(PostList, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","Post","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","fetchPosts","response","fetch","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","_id","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/Project16.11/auto-site/src/pages/Events.jsx"],"sourcesContent":["// PostList.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport Post from './Post';\r\n\r\nconst PostList = () => {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Функция для загрузки данных о постах с сервера\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/posts');\r\n        const data = await response.json();\r\n        setPosts(data);\r\n      } catch (error) {\r\n        console.error('Error fetching posts:', error);\r\n      }\r\n    };\r\n\r\n    // Вызываем функцию загрузки данных при монтировании компонента\r\n    fetchPosts();\r\n  }, []); // Пустой массив зависимостей гарантирует, что useEffect вызовется только один раз при монтировании компонента\r\n\r\n  return (\r\n    <div>\r\n      <h1>Список постов</h1>\r\n      {posts.map(post => (\r\n        <Post key={post._id} post={post} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;QAC3D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,QAAQ,CAACI,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;;IAED;IACAL,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBb,KAAK,CAACc,GAAG,CAACC,IAAI,iBACblB,OAAA,CAACF,IAAI;MAAgBoB,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACC,GAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACd,EAAA,CA3BID,QAAQ;AAAAmB,EAAA,GAARnB,QAAQ;AA6Bd,eAAeA,QAAQ;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}